#summary Learning how to make an Operating System

== Introduction ==

You may think that making an OS kernel is easy work if you've ever programmed before. You are wrong. You don't have an established API or library to program with; You have to start from _scratch_. In this tutorial, we are going to skip bootloaders and linkers and go straight to programming our kernel.

== Details ==

The programming language that I prefer for writing an OS in is C. C runs on almost every platform, and is easy to compile and run. Our very first step will be printing to screen. You may think you're over your head, but trust me, this isn't too painful =). Open up your favorite text editor or IDE, and create a new file called `video.c`. This file will contain all of our functions for writing to the screen; at least for now.

== Code ==

Our first function will be the classic `putc`. Putc is an abbreviation for put-char or character. Before you start actually writing code, there are a few things you should keep in mind: Video memory is located at 0xB8000, and there are 16 foreground and 16 background colors. We are going to be using gray text on a black background for now, so that is 0x7. The code for each character is always stored in an even array `vidmem[0]` and the color fr each character is stored directly after the character `vidmem[1]`.
{{{
/* Simple putc */
int x, y; /* Our global 'x' and 'y' */
char color; /* Our global color attribute */
void putc( unsigned char c )
{
  char *vidmem = (char*)0xB8000; /* pointer to video memory */
  int pos = ( y * 2 ) + x; /* Get the position */
  vidmem[pos]   = c; /* print the character */
  vidmem[pos++] = color; /* Set the color attribute */
}
}}}

Our next function will be `puts`. This function writes a message to the screen, and relies on the putc function to do so.
{{{
int puts( char *message )
{
  int length;
  while(*message)
  {
    putc(*message++);
    length++;
  }
  return length;
}
}}}

Next we must make a new file: main.c. No, not even operating systems can escape a `main()` function. This will be the startup function that will be called by the loader.
{{{
int main( void )
{
  puts("Hello, world!"); /* Print our welcome message */
  for(;;); /* Keep the OS running */
}
}}}

== Down & Dirty with Assembly ==

If you thought any of that was hard, wait 'til you see whats next... Assembly. Ah, yes that dreaded thing that pulled itself out of the abyss. -- Wait, assembly is not *that* bad. It just takes time to adjust to. In this tutorial, we'll skip over bootloaders (now *thats* a complex project), and go straight to our loader. Create a new file, loader.asm, or whatever you want to call it.
{{{
; Loader.asm
bits 32
extern main
global start

start:
  call main  ; Call our kernel's main() function
  cli        ; Stop interrupts (thats another article?)
  hlt        ; Stop all instructions
}}}
That certainly wasn't too bad, but that code is for a custom bootloader that's not multiboot compliant. But enough for now.

== Compiling & Running ==

If you don't already have gcc , ld or nasm, now is the time to get them. You can either get the djgpp package or the cygwin package if you are using Windows.
Here are the commands you need to use to compile you homebrew OS:
{{{
gcc -ffreestanding -fno-builtin -nostdlib -c *.c (thats main.c and video.c)
nasm -f aout loader.asm -o loader.o
ld -Ttext 0x1000 -o kernel.bin loader.o main.o video.o 
}}}
And you're done! Wait, I lied. How do you intend to test it? I would recommend virtual machine software, such as Bochs or Qemu. They allow you to test your OS inside of you host  operating system, be it linux or Windows. Still, I'm getting ahead of myself, we need something that will actually boot our kernel. Here is the code, and comments for my simple bootloader:
{{{
; boot.asm
; nasm -f bin boot.asm -o boot.bin
bits 16     ; We are in 16 bit mode (real mode)
org 0x7C00  ; BIOS loads us here

jmp word load  ; Jump to our loader

load:
  	mov ah, 0               ; RESET-command
	int 13h                 ; Call interrupt 13h
	or ah, ah               ; Check for error code
	jnz read_disk	        ; Try again if ah != 0
	mov ax, 0
	mov ax, 0				
	mov es, ax				
	mov bx, 0x1000          ; Destination address = 0000:1000

	mov ah, 02h             ; READ SECTOR-command
	mov al, 22h	        ; Number of sectors to read (0x24 = 36 sectors)
	mov ch, 0               ; Cylinder = 0
	mov cl, 2	        ; Starting Sector = 3
	mov dh, 0               ; Head = 1
	int 13h                 ; Call interrupt 13h
	or ah, ah               ; Check for error code
	jnz load                ; Try again if ah != 0
	cli			; Disable interrupts, we want to be alone

	xor ax, ax              ; Clear ax
	mov ds, ax              ; Set DS-register to 0 - used by lgdt

	lgdt [gdt_desc]         ; Load the GDT descriptor 
	
;----------Entering Protected Mode----------;
		
	mov eax, cr0            ; Copy the contents of CR0 into EAX
	or eax, 1               ; Set bit 0	
	mov cr0, eax            ; Copy the contents of EAX into CR0
	
	jmp 08h:kernel_segments ; Jump to code segment, offset kernel_segments

[BITS 32]                       ; We now need 32-bit instructions
kernel_segments:
	mov ax, 10h             ; Save data segment identifyer
	mov ds, ax              ; Move a valid data segment into the data segment register
	mov ss, ax              ; Move a valid data segment into the stack segment register
	mov esp, 090000h        ; Move the stack pointer to 090000h
	
	jmp 08h:0x1000          ; Jump to section 08h (code), offset 01000h
}}}
Yes I'm sure that is confusing, but here is a short wrap up. When you turn on you computer, it automatically starts into real mode, where you can use the bios, but there is no data protection. We (as OS-developers) want to switch to protected mode, where you have 4gb of memory, and the aforementioned data protection.
 

 


